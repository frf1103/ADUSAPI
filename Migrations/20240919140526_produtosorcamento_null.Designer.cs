// <auto-generated />
using System;
using FarmPlannerAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FarmPlannerAPI.Migrations
{
    [DbContext(typeof(FarmPlannerContext))]
    [Migration("20240919140526_produtosorcamento_null")]
    partial class produtosorcamento_null
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FarmPlannerAPI.Entities.AnoAgricola", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdOrganizacao")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdOrganizacao");

                    b.HasIndex("idconta");

                    b.ToTable("AnosAgricolas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.AssinaturaConta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("dataassinatura")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataexpiracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("idconta")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("plano")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idconta");

                    b.ToTable("AssinaturaConta", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.CadastroConta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoCliente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdGrupoConta")
                        .HasColumnType("int");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("idconta");

                    b.HasIndex("IdGrupoConta", "idconta");

                    b.ToTable("CadastroContas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ClasseConta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoClasseConta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClassesContas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Comercializacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CBOT")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cambio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Descontos")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IdMoeda")
                        .HasColumnType("int");

                    b.Property<int>("IdParceiro")
                        .HasColumnType("int");

                    b.Property<int>("IdSafra")
                        .HasColumnType("int");

                    b.Property<string>("NumeroContrato")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Premio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantidade")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Trava")
                        .HasColumnType("bit");

                    b.Property<decimal>("ValorLiquido")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdMoeda");

                    b.HasIndex("idconta");

                    b.HasIndex("IdParceiro", "idconta");

                    b.HasIndex("IdSafra", "idconta");

                    b.ToTable("Comercializacoes", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ConfigArea", b =>
                {
                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Area")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Espacamento")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Germinacao")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("IdSafra")
                        .HasColumnType("int");

                    b.Property<int>("IdTalhao")
                        .HasColumnType("int");

                    b.Property<int>("IdVariedade")
                        .HasColumnType("int");

                    b.Property<decimal?>("MargemSeguranca")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("PMS")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PopulacaoRecomendada")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProdEstimada")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QtdSementePrevista")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Stand")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnidadeSementePrevista")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idconta", "Id");

                    b.HasIndex("IdVariedade");

                    b.HasIndex("IdSafra", "idconta");

                    b.HasIndex("IdTalhao", "idconta");

                    b.ToTable("ConfigAreas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Conta", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CPF")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ContaGuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("ativa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("representanteid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.CotacaoMoeda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CotacaoData")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CotacaoValor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("IdMoeda")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMoeda");

                    b.ToTable("CotacoesMoeda", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Cultura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DiasEstimadosEmergencia")
                        .HasColumnType("int");

                    b.Property<string>("NomeProduto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnidadeProdutiva")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Culturas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.EntregaContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("datetime2");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdComercializacao")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantidade")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("idconta");

                    b.HasIndex("IdComercializacao", "idconta");

                    b.ToTable("entregaContratos");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.FarmPlannerLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("datalog")
                        .HasColumnType("datetime2");

                    b.Property<string>("idconta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("farmPlannerLogs");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Fazenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IdCultura")
                        .HasColumnType("int");

                    b.Property<int>("IdMunicipio")
                        .HasColumnType("int");

                    b.Property<int>("IdOrganizacao")
                        .HasColumnType("int");

                    b.Property<int>("IdRegiao")
                        .HasColumnType("int");

                    b.Property<int>("IdUF")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int>("TipoArrenda")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorArrendamento")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdCultura");

                    b.HasIndex("IdMunicipio");

                    b.HasIndex("IdOrganizacao");

                    b.HasIndex("IdRegiao");

                    b.HasIndex("IdUF");

                    b.HasIndex("idconta");

                    b.ToTable("Fazendas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.FinanceiroConta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("datapagto")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("desconto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("emissao")
                        .HasColumnType("datetime2");

                    b.Property<string>("idconta")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("obs")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("valor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("valorpago")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("vencimento")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("idconta");

                    b.ToTable("FinanceiroConta", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.GrupoConta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoCliente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdClasseConta")
                        .HasColumnType("int");

                    b.Property<int>("IdOrganizacao")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdClasseConta");

                    b.HasIndex("IdOrganizacao");

                    b.HasIndex("idconta");

                    b.ToTable("GruposContas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.GrupoProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GruposProdutos", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Maquina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdModeloMaquina")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<int>("idorganizacao")
                        .HasColumnType("int");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdModeloMaquina");

                    b.HasIndex("idconta");

                    b.HasIndex("idorganizacao");

                    b.ToTable("Maquinas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.MaquinaParametro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Consumo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IdCultura")
                        .HasColumnType("int");

                    b.Property<int>("IdMaquina")
                        .HasColumnType("int");

                    b.Property<int>("IdOperacao")
                        .HasColumnType("int");

                    b.Property<decimal>("Rendimento")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdCultura");

                    b.HasIndex("idconta");

                    b.HasIndex("IdMaquina", "idconta");

                    b.HasIndex("IdOperacao", "idconta");

                    b.ToTable("MaquinasParametros", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.MaquinaPlanejada", b =>
                {
                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Consumo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IdMaquina")
                        .HasColumnType("int");

                    b.Property<int>("IdModeloMaquina")
                        .HasColumnType("int");

                    b.Property<int>("IdPlanejamento")
                        .HasColumnType("int");

                    b.Property<decimal>("QtdCombEstimado")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtdHoraEstimada")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rendimento")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idconta", "Id");

                    b.HasIndex("IdModeloMaquina");

                    b.HasIndex("IdMaquina", "idconta");

                    b.HasIndex("IdPlanejamento", "idconta");

                    b.ToTable("MaquinasPlanejadas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.MarcaMaquina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MarcasMaquinas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ModeloMaquina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Combustivel")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMarca");

                    b.ToTable("ModelosMaquinas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ModeloParametro", b =>
                {
                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Consumo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IdCultura")
                        .HasColumnType("int");

                    b.Property<int>("IdModeloMaquina")
                        .HasColumnType("int");

                    b.Property<int>("IdOperacao")
                        .HasColumnType("int");

                    b.Property<decimal>("Rendimento")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idconta", "Id");

                    b.HasIndex("IdCultura");

                    b.HasIndex("IdModeloMaquina");

                    b.HasIndex("IdOperacao", "idconta");

                    b.ToTable("ModelosParametros", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Moeda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Moedas", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoIBGE")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("IdUF")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("IdUF");

                    b.ToTable("Municipios", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Operacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Consumo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTipoOperacao")
                        .HasColumnType("int");

                    b.Property<bool>("Insumo")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Rendimento")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdTipoOperacao");

                    b.HasIndex("idconta");

                    b.ToTable("Operacoes", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.OrcamentoCustoIndireto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSafra")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("idconta")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("idcontaCad")
                        .HasColumnType("int");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("valor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("idconta");

                    b.HasIndex("IdSafra", "idconta");

                    b.HasIndex("idcontaCad", "idconta");

                    b.ToTable("orcamentocustosindiretos");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.OrcamentoProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdFazenda")
                        .HasColumnType("int");

                    b.Property<int>("IdSafra")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("idconta");

                    b.HasIndex("IdFazenda", "idconta");

                    b.HasIndex("IdSafra", "idconta");

                    b.ToTable("OrcamentoProdutos", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Organizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mascara")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Registro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("idconta")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("idconta");

                    b.ToTable("Organizacoes", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.OrganizacaoUsuario", b =>
                {
                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("idorganizacao")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("uidlog")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("uid", "idorganizacao");

                    b.HasIndex("idorganizacao");

                    b.ToTable("OrganizacaoUsuario", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Parceiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fantasia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Registro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipodePessoa")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("idconta");

                    b.ToTable("Parceiros", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PlanejamentoCompra", b =>
                {
                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdFazenda")
                        .HasColumnType("int");

                    b.Property<int>("IdPrincipio")
                        .HasColumnType("int");

                    b.Property<int>("IdSafra")
                        .HasColumnType("int");

                    b.Property<decimal>("QtdComprada")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtdComprar")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtdEstoque")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtdNecessaria")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Saldo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idconta", "Id");

                    b.HasIndex("IdPrincipio");

                    b.HasIndex("IdFazenda", "idconta");

                    b.HasIndex("IdSafra", "idconta");

                    b.ToTable("PlanejamentoCompras", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PlanejamentoOperacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Area")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustoOperacao")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DAE")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataPrevista")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdConfigArea")
                        .HasColumnType("int");

                    b.Property<int>("IdOperacao")
                        .HasColumnType("int");

                    b.Property<decimal?>("Percentual")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool>("Plantio")
                        .HasColumnType("bit");

                    b.Property<decimal>("QCombustivelEstimado")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QHorasEstimadas")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasPrecision(18, 2)
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdOperacao", "idconta");

                    b.HasIndex("idconta", "IdConfigArea");

                    b.ToTable("PlanejamentoOperacoes", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PreferUsu", b =>
                {
                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<int>("idanoagricola")
                        .HasColumnType("int");

                    b.Property<int>("idorganizacao")
                        .HasColumnType("int");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uidlog")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idconta", "Id");

                    b.HasIndex("idorganizacao");

                    b.HasIndex("idanoagricola", "idconta");

                    b.ToTable("PreferUsu", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PrincipioAtivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PrincipiosAtivos", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdFabricante")
                        .HasColumnType("int");

                    b.Property<int>("IdGrupoProduto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<int>("idunidade")
                        .HasColumnType("int");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdGrupoProduto");

                    b.HasIndex("idconta");

                    b.HasIndex("idunidade");

                    b.HasIndex("IdFabricante", "idconta");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ProdutoOrcamento", b =>
                {
                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataPreco")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOrcamento")
                        .HasColumnType("int");

                    b.Property<int?>("IdPrincipioAtivo")
                        .HasColumnType("int");

                    b.Property<int?>("IdProduto")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoUnitario")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("TipoProdutoOrc")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idconta", "Id");

                    b.HasIndex("IdPrincipioAtivo");

                    b.HasIndex("IdOrcamento", "idconta");

                    b.HasIndex("IdProduto", "idconta");

                    b.ToTable("ProdutosOrcamento", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ProdutoPlanejado", b =>
                {
                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Dosagem")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IdPlanejamento")
                        .HasColumnType("int");

                    b.Property<int?>("IdPrincipioAtivo")
                        .HasColumnType("int");

                    b.Property<int?>("IdProduto")
                        .HasColumnType("int");

                    b.Property<decimal>("Tamanho")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalProduto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idconta", "Id");

                    b.HasIndex("IdPrincipioAtivo");

                    b.HasIndex("IdPlanejamento", "idconta");

                    b.HasIndex("IdProduto", "idconta");

                    b.ToTable("ProdutosPlanejados", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ProdutoPrincipioAtivo", b =>
                {
                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("idproduto")
                        .HasColumnType("int");

                    b.Property<int>("idprincipio")
                        .HasColumnType("int");

                    b.Property<decimal>("quantidade")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("idconta", "idproduto", "idprincipio");

                    b.HasIndex("idprincipio");

                    b.HasIndex("idproduto", "idconta");

                    b.ToTable("ProdutoPrincipio", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Regiao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mascara")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Regioes", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Safra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Abertura")
                        .HasColumnType("bit");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdAnoAgricola")
                        .HasColumnType("int");

                    b.Property<int?>("IdCultura")
                        .HasColumnType("int");

                    b.Property<bool>("Reforma")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("IdCultura");

                    b.HasIndex("idconta");

                    b.HasIndex("IdAnoAgricola", "idconta");

                    b.ToTable("Safras", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Talhao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AreaProdutiva")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdAnoAgricola")
                        .HasColumnType("int");

                    b.Property<int>("IdFazenda")
                        .HasColumnType("int");

                    b.Property<int>("TipoArea")
                        .HasColumnType("int");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "idconta");

                    b.HasIndex("idconta");

                    b.HasIndex("IdAnoAgricola", "idconta");

                    b.HasIndex("IdFazenda", "idconta");

                    b.ToTable("Talhoes", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Tecnologia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tecnologias", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.TipoOperacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposOperacoes", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.UF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoIBGE")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("UFs", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Unidade", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("multiplo")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("id");

                    b.ToTable("Unidades", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.UsuarioConta", b =>
                {
                    b.Property<string>("uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contaguid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idconta")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("datains")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dataup")
                        .HasColumnType("datetime2");

                    b.Property<string>("uidlog")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("uid", "contaguid", "idconta");

                    b.HasIndex("idconta");

                    b.ToTable("UsuarioConta", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Variedade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ciclo")
                        .HasColumnType("int");

                    b.Property<string>("CodigoExterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCultura")
                        .HasColumnType("int");

                    b.Property<int>("IdTecnologia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCultura");

                    b.HasIndex("IdTecnologia");

                    b.ToTable("Variedades", (string)null);
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.AnoAgricola", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Organizacao", "organizacao")
                        .WithMany("anosagricolas")
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("anoAgricolas")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("organizacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.AssinaturaConta", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("assinaturaContas")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.CadastroConta", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("cadastroContas")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.GrupoConta", "grupoConta")
                        .WithMany("cadastroContas")
                        .HasForeignKey("IdGrupoConta", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("grupoConta");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Comercializacao", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Moeda", "moeda")
                        .WithMany("comercializacao")
                        .HasForeignKey("IdMoeda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("comercializas")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Parceiro", "parceiro")
                        .WithMany("comercializacao")
                        .HasForeignKey("IdParceiro", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Safra", "safra")
                        .WithMany("comercializacao")
                        .HasForeignKey("IdSafra", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("moeda");

                    b.Navigation("parceiro");

                    b.Navigation("safra");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ConfigArea", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Variedade", "variedade")
                        .WithMany("configAreas")
                        .HasForeignKey("IdVariedade")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("configArea")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Safra", "safra")
                        .WithMany("configAreas")
                        .HasForeignKey("IdSafra", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Talhao", "talhao")
                        .WithMany("configAreas")
                        .HasForeignKey("IdTalhao", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("safra");

                    b.Navigation("talhao");

                    b.Navigation("variedade");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.CotacaoMoeda", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Moeda", "moeda")
                        .WithMany("cotacaoMoedas")
                        .HasForeignKey("IdMoeda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("moeda");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.EntregaContrato", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("entregaContrato")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Comercializacao", "comercializacao")
                        .WithMany("EntregaContrato")
                        .HasForeignKey("IdComercializacao", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("comercializacao");

                    b.Navigation("conta");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Fazenda", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Cultura", "cultura")
                        .WithMany("fazendas")
                        .HasForeignKey("IdCultura");

                    b.HasOne("FarmPlannerAPI.Entities.Municipio", "municipio")
                        .WithMany("fazendas")
                        .HasForeignKey("IdMunicipio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Organizacao", "organizacao")
                        .WithMany("fazendas")
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Regiao", "regiao")
                        .WithMany("Fazendas")
                        .HasForeignKey("IdRegiao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.UF", "uF")
                        .WithMany("fazendas")
                        .HasForeignKey("IdUF")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("fazendas")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("cultura");

                    b.Navigation("municipio");

                    b.Navigation("organizacao");

                    b.Navigation("regiao");

                    b.Navigation("uF");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.FinanceiroConta", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("financeiroContas")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.GrupoConta", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.ClasseConta", "classeConta")
                        .WithMany("grupoContas")
                        .HasForeignKey("IdClasseConta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Organizacao", "organizacao")
                        .WithMany("grupoContas")
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("grupoContas")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("classeConta");

                    b.Navigation("conta");

                    b.Navigation("organizacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Maquina", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.ModeloMaquina", "modeloMaquina")
                        .WithMany("maquinas")
                        .HasForeignKey("IdModeloMaquina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("maquinas")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Organizacao", "organizacao")
                        .WithMany("maquinas")
                        .HasForeignKey("idorganizacao")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("modeloMaquina");

                    b.Navigation("organizacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.MaquinaParametro", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Cultura", "cultura")
                        .WithMany("maquinasparametro")
                        .HasForeignKey("IdCultura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("maquinaParametros")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Maquina", "maquina")
                        .WithMany("maquinaParametros")
                        .HasForeignKey("IdMaquina", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Operacao", "operacao")
                        .WithMany("maquinasparametro")
                        .HasForeignKey("IdOperacao", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("cultura");

                    b.Navigation("maquina");

                    b.Navigation("operacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.MaquinaPlanejada", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.ModeloMaquina", "modelomaquina")
                        .WithMany("maquinasplanejada")
                        .HasForeignKey("IdModeloMaquina")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("maquinaPlanejada")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Maquina", "maquina")
                        .WithMany("maquinasplanejada")
                        .HasForeignKey("IdMaquina", "idconta")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FarmPlannerAPI.Entities.PlanejamentoOperacao", "planejamentoOperacao")
                        .WithMany("maquinasplanejada")
                        .HasForeignKey("IdPlanejamento", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("maquina");

                    b.Navigation("modelomaquina");

                    b.Navigation("planejamentoOperacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ModeloMaquina", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.MarcaMaquina", "marcaMaquina")
                        .WithMany("ModeloMaquina")
                        .HasForeignKey("IdMarca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("marcaMaquina");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ModeloParametro", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Cultura", "cultura")
                        .WithMany("modelosparametro")
                        .HasForeignKey("IdCultura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.ModeloMaquina", "modeloMaquina")
                        .WithMany("modelosparametros")
                        .HasForeignKey("IdModeloMaquina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("modeloParametros")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Operacao", "operacao")
                        .WithMany("modelosparametro")
                        .HasForeignKey("IdOperacao", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("cultura");

                    b.Navigation("modeloMaquina");

                    b.Navigation("operacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Municipio", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.UF", "uF")
                        .WithMany("Municipios")
                        .HasForeignKey("IdUF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("uF");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Operacao", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.TipoOperacao", "TipoOperacao")
                        .WithMany("operacoes")
                        .HasForeignKey("IdTipoOperacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("operacoes")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoOperacao");

                    b.Navigation("conta");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.OrcamentoCustoIndireto", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("orcamentoCustoIndiretos")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Safra", "safra")
                        .WithMany("orcamentoCustoIndiretos")
                        .HasForeignKey("IdSafra", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.CadastroConta", "contacad")
                        .WithMany("orcamentoCustoIndiretos")
                        .HasForeignKey("idcontaCad", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("contacad");

                    b.Navigation("safra");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.OrcamentoProduto", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("orcamentoProdutos")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Fazenda", "fazenda")
                        .WithMany("OrcamentoProduto")
                        .HasForeignKey("IdFazenda", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Safra", "safra")
                        .WithMany("OrcamentoProduto")
                        .HasForeignKey("IdSafra", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("fazenda");

                    b.Navigation("safra");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Organizacao", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("organizacoes")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.OrganizacaoUsuario", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Organizacao", "organizacao")
                        .WithMany("organizacaoUsuarios")
                        .HasForeignKey("idorganizacao")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("organizacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Parceiro", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("parceiros")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PlanejamentoCompra", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.PrincipioAtivo", "principio")
                        .WithMany("planejamentoCompras")
                        .HasForeignKey("IdPrincipio")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("planejamentoCompras")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Fazenda", "fazenda")
                        .WithMany("planejamentos")
                        .HasForeignKey("IdFazenda", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Safra", "safra")
                        .WithMany("planejamentoCompras")
                        .HasForeignKey("IdSafra", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("fazenda");

                    b.Navigation("principio");

                    b.Navigation("safra");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PlanejamentoOperacao", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("planejamentoOperacao")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Operacao", "operacao")
                        .WithMany("planejamentoOperacao")
                        .HasForeignKey("IdOperacao", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.ConfigArea", "configArea")
                        .WithMany("planejamentoOperacao")
                        .HasForeignKey("idconta", "IdConfigArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("configArea");

                    b.Navigation("conta");

                    b.Navigation("operacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PreferUsu", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Organizacao", "organizacao")
                        .WithMany("preferUsus")
                        .HasForeignKey("idorganizacao")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.AnoAgricola", "anoAgricola")
                        .WithMany("preferUsus")
                        .HasForeignKey("idanoagricola", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("anoAgricola");

                    b.Navigation("organizacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Produto", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.GrupoProduto", "grupoProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("IdGrupoProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("produtos")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Unidade", "unidade")
                        .WithMany("produtos")
                        .HasForeignKey("idunidade")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Parceiro", "parceiro")
                        .WithMany("Produtos")
                        .HasForeignKey("IdFabricante", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("grupoProduto");

                    b.Navigation("parceiro");

                    b.Navigation("unidade");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ProdutoOrcamento", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.PrincipioAtivo", "princativo")
                        .WithMany("produtoorcamento")
                        .HasForeignKey("IdPrincipioAtivo")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("produtoOrcamento")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.OrcamentoProduto", "orcamentoProduto")
                        .WithMany("produtoorcamento")
                        .HasForeignKey("IdOrcamento", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Produto", "produto")
                        .WithMany("produtoorcamento")
                        .HasForeignKey("IdProduto", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("orcamentoProduto");

                    b.Navigation("princativo");

                    b.Navigation("produto");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ProdutoPlanejado", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.PrincipioAtivo", "principioativo")
                        .WithMany("produtosplanejados")
                        .HasForeignKey("IdPrincipioAtivo")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("produtoPlanejado")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.PlanejamentoOperacao", "planejamentoOperacao")
                        .WithMany("produtosplanejados")
                        .HasForeignKey("IdPlanejamento", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Produto", "produto")
                        .WithMany("produtosplanejados")
                        .HasForeignKey("IdProduto", "idconta")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("conta");

                    b.Navigation("planejamentoOperacao");

                    b.Navigation("principioativo");

                    b.Navigation("produto");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ProdutoPrincipioAtivo", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("produtoPrincipios")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.PrincipioAtivo", "principioAtivo")
                        .WithMany("produtosprincipio")
                        .HasForeignKey("idprincipio")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Produto", "produtoproduto")
                        .WithMany("produtosprincipio")
                        .HasForeignKey("idproduto", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("conta");

                    b.Navigation("principioAtivo");

                    b.Navigation("produtoproduto");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Safra", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Cultura", "cultura")
                        .WithMany("Safras")
                        .HasForeignKey("IdCultura");

                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("safras")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.AnoAgricola", "anoAgricola")
                        .WithMany("Safras")
                        .HasForeignKey("IdAnoAgricola", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("anoAgricola");

                    b.Navigation("conta");

                    b.Navigation("cultura");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Talhao", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("talhaos")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.AnoAgricola", "anoagricola")
                        .WithMany("Talhoes")
                        .HasForeignKey("IdAnoAgricola", "idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Fazenda", "fazenda")
                        .WithMany("Talhoes")
                        .HasForeignKey("IdFazenda", "idconta")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("anoagricola");

                    b.Navigation("conta");

                    b.Navigation("fazenda");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.UsuarioConta", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Conta", "conta")
                        .WithMany("usuarios")
                        .HasForeignKey("idconta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conta");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Variedade", b =>
                {
                    b.HasOne("FarmPlannerAPI.Entities.Cultura", "cultura")
                        .WithMany("Variedades")
                        .HasForeignKey("IdCultura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FarmPlannerAPI.Entities.Tecnologia", "tecnologia")
                        .WithMany("Variedades")
                        .HasForeignKey("IdTecnologia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cultura");

                    b.Navigation("tecnologia");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.AnoAgricola", b =>
                {
                    b.Navigation("Safras");

                    b.Navigation("Talhoes");

                    b.Navigation("preferUsus");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.CadastroConta", b =>
                {
                    b.Navigation("orcamentoCustoIndiretos");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ClasseConta", b =>
                {
                    b.Navigation("grupoContas");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Comercializacao", b =>
                {
                    b.Navigation("EntregaContrato");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ConfigArea", b =>
                {
                    b.Navigation("planejamentoOperacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Conta", b =>
                {
                    b.Navigation("anoAgricolas");

                    b.Navigation("assinaturaContas");

                    b.Navigation("cadastroContas");

                    b.Navigation("comercializas");

                    b.Navigation("configArea");

                    b.Navigation("entregaContrato");

                    b.Navigation("fazendas");

                    b.Navigation("financeiroContas");

                    b.Navigation("grupoContas");

                    b.Navigation("maquinaParametros");

                    b.Navigation("maquinaPlanejada");

                    b.Navigation("maquinas");

                    b.Navigation("modeloParametros");

                    b.Navigation("operacoes");

                    b.Navigation("orcamentoCustoIndiretos");

                    b.Navigation("orcamentoProdutos");

                    b.Navigation("organizacoes");

                    b.Navigation("parceiros");

                    b.Navigation("planejamentoCompras");

                    b.Navigation("planejamentoOperacao");

                    b.Navigation("produtoOrcamento");

                    b.Navigation("produtoPlanejado");

                    b.Navigation("produtoPrincipios");

                    b.Navigation("produtos");

                    b.Navigation("safras");

                    b.Navigation("talhaos");

                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Cultura", b =>
                {
                    b.Navigation("Safras");

                    b.Navigation("Variedades");

                    b.Navigation("fazendas");

                    b.Navigation("maquinasparametro");

                    b.Navigation("modelosparametro");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Fazenda", b =>
                {
                    b.Navigation("OrcamentoProduto");

                    b.Navigation("Talhoes");

                    b.Navigation("planejamentos");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.GrupoConta", b =>
                {
                    b.Navigation("cadastroContas");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.GrupoProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Maquina", b =>
                {
                    b.Navigation("maquinaParametros");

                    b.Navigation("maquinasplanejada");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.MarcaMaquina", b =>
                {
                    b.Navigation("ModeloMaquina");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.ModeloMaquina", b =>
                {
                    b.Navigation("maquinas");

                    b.Navigation("maquinasplanejada");

                    b.Navigation("modelosparametros");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Moeda", b =>
                {
                    b.Navigation("comercializacao");

                    b.Navigation("cotacaoMoedas");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Municipio", b =>
                {
                    b.Navigation("fazendas");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Operacao", b =>
                {
                    b.Navigation("maquinasparametro");

                    b.Navigation("modelosparametro");

                    b.Navigation("planejamentoOperacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.OrcamentoProduto", b =>
                {
                    b.Navigation("produtoorcamento");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Organizacao", b =>
                {
                    b.Navigation("anosagricolas");

                    b.Navigation("fazendas");

                    b.Navigation("grupoContas");

                    b.Navigation("maquinas");

                    b.Navigation("organizacaoUsuarios");

                    b.Navigation("preferUsus");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Parceiro", b =>
                {
                    b.Navigation("Produtos");

                    b.Navigation("comercializacao");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PlanejamentoOperacao", b =>
                {
                    b.Navigation("maquinasplanejada");

                    b.Navigation("produtosplanejados");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.PrincipioAtivo", b =>
                {
                    b.Navigation("planejamentoCompras");

                    b.Navigation("produtoorcamento");

                    b.Navigation("produtosplanejados");

                    b.Navigation("produtosprincipio");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Produto", b =>
                {
                    b.Navigation("produtoorcamento");

                    b.Navigation("produtosplanejados");

                    b.Navigation("produtosprincipio");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Regiao", b =>
                {
                    b.Navigation("Fazendas");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Safra", b =>
                {
                    b.Navigation("OrcamentoProduto");

                    b.Navigation("comercializacao");

                    b.Navigation("configAreas");

                    b.Navigation("orcamentoCustoIndiretos");

                    b.Navigation("planejamentoCompras");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Talhao", b =>
                {
                    b.Navigation("configAreas");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Tecnologia", b =>
                {
                    b.Navigation("Variedades");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.TipoOperacao", b =>
                {
                    b.Navigation("operacoes");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.UF", b =>
                {
                    b.Navigation("Municipios");

                    b.Navigation("fazendas");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Unidade", b =>
                {
                    b.Navigation("produtos");
                });

            modelBuilder.Entity("FarmPlannerAPI.Entities.Variedade", b =>
                {
                    b.Navigation("configAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
